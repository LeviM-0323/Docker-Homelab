services:
  # Automated Media Server Containers #
  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    # network_mode: "service:gluetun"
    environment:
      - PUID=1000
      - PGID=1000
      - UMASK=002
      - TZ=${TZ}
    volumes:
      - ${CONFIG}\sonarr-config:/config
      - ${MEDIA}:/media
    ports:
      - "8989:8989"
    restart: unless-stopped

  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    # network_mode: "service:gluetun"
    environment:
      - PUID=1000
      - PGID=1000
      - UMASK=002
      - TZ=${TZ}
    volumes:
      - ${CONFIG}\radarr-config:/config
      - ${MEDIA}:/media
    ports:
      - "7878:7878"
    restart: unless-stopped

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:develop
    container_name: prowlarr
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    environment:
      - PUID=13006
      - PGID=13000
      - UMASK=002
      - TZ=${TZ}
    volumes:
      - ${CONFIG}\prowlarr-config:/config
    ports:
      - "9696:9696"
    restart: unless-stopped

  sabnzbd:
    image: lscr.io/linuxserver/sabnzbd:latest
    container_name: sabnzbd
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    # network_mode: "service:gluetun"
    environment:
      - PUID=1000
      - PGID=1000
      - UMASK=002
      - TZ=${TZ}
    volumes:
      - ${MEDIA}:/media
      - ${CONFIG}\sabnzbd-config:/config
    ports:
      - "8081:8081"
    restart: unless-stopped

  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    container_name: homepage
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    environment:
      PUID: 1000
      PGID: 1000
      HOMEPAGE_ALLOWED_HOSTS: "*"
    ports:
      - 3000:3000
    volumes:
      - ${CONFIG}\homepage-config:/app/config 
      - ${CONFIG}\homepage-config\images:/app/public/images # optional, for images 
    restart: unless-stopped
  
  tautulli:
    image: lscr.io/linuxserver/tautulli:latest
    container_name: tautulli
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${CONFIG}\tautulli-config:/config
    ports:
      - 8181:8181
    restart: unless-stopped
  # End #

  # Development and Discord Bots #
  nginx:
    image: lscr.io/linuxserver/nginx:latest
    container_name: nginx
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
    volumes:
      - ${CONFIG}\nginx-config:/config
    ports:
      - 80:80
      - 443:443
    restart: unless-stopped
    networks:
      - db_network

  mysql:
    image: mysql
    container_name: mysql
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: 'website_db'
      MYSQL_USER: 'root'
      MYSQL_PASSWORD: '123'
      MYSQL_ROOT_PASSWORD: '123'
    volumes:
      - ${CONFIG}\mysql-config:/var/lib/mysql
    networks:
      - db_network

  bot:
    container_name: discord_bot
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    labels:
      - "com.centurylinklabs.watchtower.enable=false"
    build:
      context:
        ${CONFIG}\discord-bot
    volumes:
      - ${CONFIG}\discord-bot:/usr/src/app
    working_dir: /usr/src/app
    restart: unless-stopped
    command: ["node", "src/index.js"]

  muse:
    image: ghcr.io/museofficial/muse:latest
    container_name: music_bot
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    restart: unless-stopped
    volumes:
      - ${CONFIG}\muse-config:/data
    environment:
      - DISCORD_TOKEN=${MUSE_TOKEN}
      - YOUTUBE_API_KEY=${YOUTUBE_KEY}
      - SPOTIFY_CLIENT_ID=${SPOTIFY_CLIENT}
      - SPOTIFY_CLIENT_SECRET=${SPOTIFY_SECRET}

  pythonapp:
    container_name: python_app
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    labels:
      - "com.centurylinklabs.watchtower.enable=false"
    build:
      context: ${CONFIG}\pythonapp-config\Python-Projects
      dockerfile: dockerfile
    volumes:
      - ${CONFIG}\pythonapp-config:/app
    ports:
      - "8501:8501"
    restart: unless-stopped
  
  doplarr:
    image: lscr.io/linuxserver/doplarr:latest
    container_name: doplarr
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ}
      - DISCORD__TOKEN=${DOPLARR_TOKEN}
      - RADARR__API=${RADARR_TOKEN}
      - RADARR__URL=http://192.168.2.21:7878
      - SONARR__API=${SONARR_TOKEN}
      - SONARR__URL=http://192.168.2.21:8989
      - DISCORD__MAX_RESULTS=10 #optional
      - DISCORD__REQUESTED_MSG_STYLE=:plain #optional
      - PARTIAL_SEASONS=false #optional
      - LOG_LEVEL=:info #optional
    volumes:
      - ${CONFIG}\doplarr-config:/config
    restart: unless-stopped
  
  chatapp:
    labels:
      - "com.centurylinklabs.watchtower.enable=false"
    build:
      context: ${config}\chatapp-config
      dockerfile: dockerfile
    ports:
      - "9876:9876"
    container_name: chatapp
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    networks:
      - db_network
    restart: unless-stopped
  # End #

  # Other Containers #
  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    restart: unless-stopped
    command: tunnel --no-autoupdate run --token ${CLOUDFLARE_TOKEN}
    environment:
      - TUNNEL_TOKEN=${CLOUDFLARE_TOKEN}

  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - 8001:8080
    environment:
      - TZ=${TZ}
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_NOTIFICATION_URL=discord://8aK38AwQ_uUjWzm4DHzSxDOfZe6zBSZ571PCvNNEl1KK8tcd8miF70h8y6NtpVdGsZYm@1323419622921338891
      - WATCHTOWER_HTTP_API_METRICS=true
      - WATCHTOWER_HTTP_API_TOKEN=${WATCHTOWER_TOKEN}
    restart: unless-stopped
    command: --schedule "0 0 4 * * *"

  mc:
    image: itzg/minecraft-server
    container_name: minecraft-server
    deploy:
      resources:
        limits:
          memory: 2048M
        reservations:
          memory: 1024M
    environment:
      # Required
      EULA: "true" 
      TZ: "America/Toronto"
      MEMORY: "2G"
      # CurseForge Shit
      TYPE: AUTO_CURSEFORGE
      CF_API_KEY: ${CURSEFORGE_TOKEN}
      CF_MODPACK_MANIFEST: /data/manifest.json
      CF_SLUG: "custom"
      # Server Configuaration
      MOTD: | 
              \u00A7k420 \u00A7r \u00A7eFUCKWITS SERVER UNITE (╯°□°)╯︵ ┻━┻ \u00A77\u00A7k420\u00A7r \u00A7k420\u00A7r 
                        \u00A75MINECRAFT \u00A76SERVER \u00A79LETSGOOOOOOOOOOOOO \u00A7r\u00A7k420
      ICON: ./icon.png
      SERVER_NAME: FUCKWITS SERVER UNITE (╯°□°)╯︵ ┻━┻
      MAX_PLAYERS: 6
      ENABLE_WHITELIST: "true"
      WHITELIST: LeviM0323
    ports:
      - "25565:25565"
      - "25575:25575"
    volumes:
      - ${CONFIG}\minecraft-config:/data
    stdin_open: true
    tty: true
    restart: unless-stopped

  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "82:80/tcp"
      - "442:443/tcp"
    environment:
      TZ: 'America/Toronto'
      FTLCONF_dns_listeningMode: 'all'
      FTLCONF_webserver_api_password: ${PIHOLE_PASS}
    volumes:
      - ${CONFIG}\pihole-config:/etc/pihole'
    cap_add:
      # Optional, if Pi-hole should get some more processing time
      - SYS_NICE
    restart: unless-stopped

# Volumes and Networks #
networks:
  db_network:
    driver: bridge
# End #